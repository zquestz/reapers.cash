{"ast":null,"code":"import _regeneratorRuntime from\"/home/quest/src/reapers.cash/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/quest/src/reapers.cash/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// constants\nimport Web3EthContract from\"web3-eth-contract\";import Web3 from\"web3\";// log\nimport{fetchData}from\"../data/dataActions\";var connectRequest=function connectRequest(){return{type:\"CONNECTION_REQUEST\"};};var connectSuccess=function connectSuccess(payload){return{type:\"CONNECTION_SUCCESS\",payload:payload};};var connectFailed=function connectFailed(payload){return{type:\"CONNECTION_FAILED\",payload:payload};};var updateAccountRequest=function updateAccountRequest(payload){return{type:\"UPDATE_ACCOUNT\",payload:payload};};export var connect=function connect(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var abiResponse,abi,configResponse,CONFIG,_window,ethereum,metamaskIsInstalled,web3,accounts,networkId,SmartContractObj;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(connectRequest());_context.next=3;return fetch(\"/config/abi.json\",{headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"}});case 3:abiResponse=_context.sent;_context.next=6;return abiResponse.json();case 6:abi=_context.sent;_context.next=9;return fetch(\"/config/config.json\",{headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"}});case 9:configResponse=_context.sent;_context.next=12;return configResponse.json();case 12:CONFIG=_context.sent;_window=window,ethereum=_window.ethereum;metamaskIsInstalled=ethereum&&ethereum.isMetaMask;if(!metamaskIsInstalled){_context.next=33;break;}Web3EthContract.setProvider(ethereum);web3=new Web3(ethereum);_context.prev=18;_context.next=21;return ethereum.request({method:\"eth_requestAccounts\"});case 21:accounts=_context.sent;_context.next=24;return ethereum.request({method:\"net_version\"});case 24:networkId=_context.sent;if(networkId==CONFIG.NETWORK.ID){SmartContractObj=new Web3EthContract(abi,CONFIG.CONTRACT_ADDRESS);dispatch(connectSuccess({account:accounts[0],smartContract:SmartContractObj,web3:web3}));// Add listeners start\nethereum.on(\"accountsChanged\",function(accounts){dispatch(updateAccount(accounts[0]));});ethereum.on(\"chainChanged\",function(){window.location.reload();});// Add listeners end\n}else{dispatch(connectFailed(\"Change network to \".concat(CONFIG.NETWORK.NAME,\".\")));}_context.next=31;break;case 28:_context.prev=28;_context.t0=_context[\"catch\"](18);dispatch(connectFailed(\"Something went wrong.\"));case 31:_context.next=34;break;case 33:dispatch(connectFailed(\"Install Metamask.\"));case 34:case\"end\":return _context.stop();}}},_callee,null,[[18,28]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var updateAccount=function updateAccount(account){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch(updateAccountRequest({account:account}));dispatch(fetchData(account));case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};","map":{"version":3,"sources":["/home/quest/src/reapers.cash/src/redux/blockchain/blockchainActions.js"],"names":["Web3EthContract","Web3","fetchData","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","fetch","headers","Accept","abiResponse","json","abi","configResponse","CONFIG","window","ethereum","metamaskIsInstalled","isMetaMask","setProvider","web3","request","method","accounts","networkId","NETWORK","ID","SmartContractObj","CONTRACT_ADDRESS","account","smartContract","on","updateAccount","location","reload","NAME"],"mappings":"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","sourcesContent":["// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const CONFIG = await configResponse.json();\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\",\n        });\n        if (networkId == CONFIG.NETWORK.ID) {\n          const SmartContractObj = new Web3EthContract(\n            abi,\n            CONFIG.CONTRACT_ADDRESS\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}